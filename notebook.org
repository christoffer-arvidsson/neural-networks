#+TITLE: Notebook

Task is to store patterns of digits into a hopfield network, then try out which pattern different distorted patterns converge to.

#+begin_src jupyter-python
import sys
sys.path.append('src')
#+end_src

#+RESULTS:

* Recognizing digits
Load some libraries.

#+begin_src jupyter-python
from dataset import digit_dataset
from model import HopfieldNetwork

import numpy as np
import matplotlib.pyplot as plt

import matplotlib as mpl
mpl.rc('image', cmap='gray')
#+end_src

#+RESULTS:

Plot the dataset we are working with

#+begin_src jupyter-python :file ./img/digits.png
fig, axes = plt.subplots(1, len(digit_dataset))
for i, ax in enumerate(axes):
    ax.imshow(digit_dataset[i], origin='upper')

plt.show()
#+end_src

#+RESULTS:
[[file:./img/digits.png]]

Train model

#+begin_src jupyter-python
N = np.size(digit_dataset[0])
model = HopfieldNetwork(N, asynchronous=True)
model.store(np.reshape(digit_dataset, (-1, N)))
#+end_src

#+RESULTS:

** Feed different patterns

#+begin_src jupyter-python :file ./img/morphed_patterns.png
x1 = np.array([[1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [-1, -1, 1, 1, 1, 1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1], [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, 1, 1, 1, 1, 1, 1, 1, -1], [1, 1, -1, -1, -1, -1, -1, -1, 1, 1]])

x2 = np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, -1, -1, -1, -1, 1, 1, 1], [1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [1, -1, -1, -1, 1, 1, -1, -1, -1, 1], [1, -1, -1, -1, 1, 1, -1, -1, -1, 1], [1, -1, -1, -1, 1, 1, -1, -1, -1, 1], [1, -1, -1, -1, 1, 1, -1, -1, -1, 1], [1, -1, -1, -1, 1, 1, -1, -1, -1, 1], [1, -1, -1, -1, 1, 1, -1, -1, -1, 1], [1, -1, -1, -1, 1, 1, -1, -1, -1, 1], [1, -1, -1, -1, 1, 1, -1, -1, -1, 1], [1, -1, -1, -1, 1, 1, -1, -1, -1, 1], [1, -1, -1, -1, 1, 1, -1, -1, -1, 1], [1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [1, 1, 1, -1, -1, -1, -1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])

x3 = np.array([[-1, -1, -1, -1, -1, -1, -1, -1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, 1], [1, 1, 1, 1, 1, -1, -1, -1, 1, 1], [1, 1, 1, 1, 1, -1, -1, -1, 1, 1], [1, 1, 1, 1, 1, -1, -1, -1, 1, 1], [1, 1, 1, 1, 1, -1, -1, -1, 1, 1], [1, 1, 1, 1, 1, -1, -1, -1, 1, 1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, 1], [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1], [1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, -1, -1]])

patterns = [x1, x2, x3]

fig, axes = plt.subplots(3,2)
morphed_patterns = np.zeros_like(patterns, dtype=int)
for i, pattern in enumerate(patterns):
    morphed_patterns[i] = model.predict(pattern.reshape(-1), 1000, update_scheme='random').reshape(pattern.shape)

    ax1, ax2 = axes[i]
    ax1.imshow(pattern, origin='upper')
    ax2.imshow(morphed_patterns[i], origin='upper')

plt.show()

#+end_src

#+RESULTS:
[[file:./img/morphed_patterns.png]]

Print text for handin.
#+begin_src jupyter-python
for pat in morphed_patterns:
    print(repr(pat))
#+end_src

#+RESULTS:
#+begin_example
array([[-1, -1,  1,  1,  1,  1,  1,  1, -1, -1],
       [-1, -1,  1,  1,  1,  1,  1,  1,  1, -1],
       [-1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
       [-1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
       [-1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
       [-1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
       [-1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
       [-1, -1,  1,  1,  1,  1,  1,  1, -1, -1],
       [-1, -1,  1,  1,  1,  1,  1,  1, -1, -1],
       [-1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
       [-1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
       [-1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
       [-1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
       [-1, -1, -1, -1, -1, -1,  1,  1,  1, -1],
       [-1, -1,  1,  1,  1,  1,  1,  1,  1, -1],
       [-1, -1,  1,  1,  1,  1,  1,  1, -1, -1]])
array([[ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1],
       [ 1,  1,  1, -1, -1, -1, -1,  1,  1,  1],
       [ 1,  1, -1, -1, -1, -1, -1, -1,  1,  1],
       [ 1, -1, -1, -1,  1,  1, -1, -1, -1,  1],
       [ 1, -1, -1, -1,  1,  1, -1, -1, -1,  1],
       [ 1, -1, -1, -1,  1,  1, -1, -1, -1,  1],
       [ 1, -1, -1, -1,  1,  1, -1, -1, -1,  1],
       [ 1, -1, -1, -1,  1,  1, -1, -1, -1,  1],
       [ 1, -1, -1, -1,  1,  1, -1, -1, -1,  1],
       [ 1, -1, -1, -1,  1,  1, -1, -1, -1,  1],
       [ 1, -1, -1, -1,  1,  1, -1, -1, -1,  1],
       [ 1, -1, -1, -1,  1,  1, -1, -1, -1,  1],
       [ 1, -1, -1, -1,  1,  1, -1, -1, -1,  1],
       [ 1,  1, -1, -1, -1, -1, -1, -1,  1,  1],
       [ 1,  1,  1, -1, -1, -1, -1,  1,  1,  1],
       [ 1,  1,  1,  1,  1,  1,  1,  1,  1,  1]])
array([[ 1,  1, -1, -1, -1, -1, -1, -1,  1,  1],
       [ 1,  1, -1, -1, -1, -1, -1, -1, -1,  1],
       [ 1,  1,  1,  1,  1,  1, -1, -1, -1,  1],
       [ 1,  1,  1,  1,  1,  1, -1, -1, -1,  1],
       [ 1,  1,  1,  1,  1,  1, -1, -1, -1,  1],
       [ 1,  1,  1,  1,  1,  1, -1, -1, -1,  1],
       [ 1,  1,  1,  1,  1,  1, -1, -1, -1,  1],
       [ 1,  1, -1, -1, -1, -1, -1, -1,  1,  1],
       [ 1,  1, -1, -1, -1, -1, -1, -1,  1,  1],
       [ 1,  1,  1,  1,  1,  1, -1, -1, -1,  1],
       [ 1,  1,  1,  1,  1,  1, -1, -1, -1,  1],
       [ 1,  1,  1,  1,  1,  1, -1, -1, -1,  1],
       [ 1,  1,  1,  1,  1,  1, -1, -1, -1,  1],
       [ 1,  1,  1,  1,  1,  1, -1, -1, -1,  1],
       [ 1,  1, -1, -1, -1, -1, -1, -1, -1,  1],
       [ 1,  1, -1, -1, -1, -1, -1, -1,  1,  1]])
#+end_example
