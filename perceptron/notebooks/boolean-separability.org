#+title: 3-dimensional Boolean functions
#+setupfile: ~/Dropbox/org/orbit/articles/setup_file.org

The total number of symmetries accounting for all possible choices of $k \in
\{0,\ldots,8\}$ is 30. We can use this to narrow down what has to be checked to
determine linear inseparability. Inverting the bits might change the symmetry,
but it does not change linear separability, so we can reduce it further to $15$.

It turns out the linearly inseparable configurations have planes like the XOR
case $[[1,0],[0,1]]$. There are two cases where this plane shows up: On a face
of the cube, or through the center of the cube. The names of the vertices of the
cube, as well as an example for each case is shown below.
#+begin_src text
   Names        Case 1       Case 2
   a----b       *----*       1----*
  /|   /|      /|   /|      /|   /|
 c----d |     1----0 |     *----0 |
 | e--|-f     | *--|-*     | 0--|-*
 |/   |/      |/   |/      |/   |/
 g----h       0----1       *----1
#+end_src

#+begin_src jupyter-python :exports none
from itertools import product
import numpy as np

# Generate all configurations
states = np.array(list(product([0,1], repeat=8)))
#+end_src

For the first case, there are 6 faces on the cube and 2 ways for each face to
place the plane (12 possibilities). For the second case, there are another 6
planes that go through the center (12 possibilities).

Instead of checking for exact values of the bits, just check that one diagonal
is different from the other diagonal in each plane. This takes advantage of
inversion not changing linear separability. The resulting 12 conditions is
captured the following python function.
#+begin_src jupyter-python
def check_linear_inseparability(a,b,c,d,e,f,g,h):
    expression = \
        (a==d and b==c and a!=b) or \
        (b==h and d==f and b!=d) or \
        (e==h and f==g and e!=f) or \
        (a==g and c==e and a!=c) or \
        (c==h and d==g and c!=d) or \
        (a==f and b==e and a!=b) or \
        \
        (a==h and b==g and b!=a) or \
        (a==h and c==f and c!=a) or \
        (a==h and d==e and d!=a) or \
        (b==g and d==e and d!=b) or \
        (b==g and f==c and b!=f) or \
        (f==c and d==e and f!=d)

    return expression
#+end_src

#+RESULTS:

Checking each of the $256$ configurations and counting those that are linearly
inseparable using the above condition, we find that out of 256 functions, 152
are linearly inseparable. That leaves $256 - 152 = 104$ linearly separable
functions.

#+begin_src jupyter-python :exports none
linearly_inseparable = 0
for state in states:
    linearly_inseparable += check_linear_inseparability(*state)

print(f'Number of functions: {2**2**3}')
print(f'Linearly inseparable functions: {linearly_inseparable}')
print(f'Linearly separable functions: {2**2**3 - linearly_inseparable}')
#+end_src

#+RESULTS:
: Number of functions: 256
: Linearly inseparable functions: 152
: Linearly separable functions: 104
