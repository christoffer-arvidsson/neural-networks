:properties:
:header-args: :session hopfield2 :exports both
:EXPORT_FILE_NAME: out/stochastic-hopfield-network
:end:

#+setupfile: ~/Dropbox/org/orbit/articles/setup_file.org

#+TITLE: Stochastic hopfield network

Model defined in =model.py=
#+include: "src/model.py" src python

Notebook for estimating order parameters of a stochastic Hopfield network.

Load some libraries.
#+begin_src python
import sys
sys.path.append('src')

#+begin_src python
from model import StochasticHopfieldNetwork

import numpy as np
import matplotlib.pyplot as plt

import matplotlib as mpl
mpl.rc('image', cmap='gray')
#+end_src

#+RESULTS:

Define helper functions to run two simulations
#+begin_src python
def generate_patterns(num_patterns, num_bits, prob, rng):
    """Generate binary patterns with probability."""
    return rng.choice([-1,1], (num_patterns, num_bits), replace=True, p=[prob, 1-prob])

def run_simulation(num_patterns, num_bits, num_updates, num_experiments, rng):
    order_parameters = np.zeros(num_experiments, dtype=float)

    model = StochasticHopfieldNetwork(N, noise_parameter, seed=seed, asynchronous=True,
                                      zero_diagonal=False)
    for i in range(num_experiments):
        print(f'Running trial: {i}', end='\r')

        patterns = generate_patterns(p, N, 1/2, rng)
        model.store(patterns)

        _, order_parameters[i] = model.predict(patterns[0], num_updates,
                                               update_scheme='typewriter',
                                               stop_on_convergence=False)

    print('done.')
    return order_parameters
#+end_src

#+RESULTS:

Run for $p=7$

#+begin_src python
seed = 1;
rng = np.random.default_rng(seed=seed)
noise_parameter = 2
N = 200
p = 7
num_updates = (2*10**5)
num_experiments = 100

order_parameters1 = run_simulation(p, N, num_updates, num_experiments, rng)
print(f'Average order parameter: {np.mean(order_parameters1)}')
#+end_src

#+RESULTS:
: done.
: Average order parameter: 0.9028316683416583

Run for $p=45$
#+begin_src python
p = 45
order_parameters2 = run_simulation(p, N, num_updates, num_experiments, rng)
print(f'Average order parameter: {np.mean(order_parameters2)}')
#+end_src

#+RESULTS:
: done.
: Average order parameter: 0.15361914690426548
